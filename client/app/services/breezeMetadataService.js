(function(angular){
    'use strict';

    angular.module("app").factory( 'breezeMetadataService',  ['breeze', factory] );

    function factory(breeze) {
        return {
            createMetadataStore: createMetadataStore
        };

        function createMetadataStore() {

            var store = new breeze.MetadataStore({namingConvention: createNamingConvention()});

            fillMetadataStore(store);

            return store;
        }

        function createNamingConvention() {
            return new breeze.NamingConvention({
                serverPropertyNameToClient: function(serverPropertyName){
                    switch(serverPropertyName) {
                        case '_id':
                            return 'id';
                        default:
                            return serverPropertyName;
                    }
                },
                clientPropertyNameToServer: function(clientPropertyName){
                    switch(clientPropertyName) {
                        case 'id':
                            return '_id';
                        default:
                            return clientPropertyName;
                    }
                }
            })
        }

        function fillMetadataStore(store) {

            // Using Breeze Labs: breeze.metadata.helper.js
            // https://github.com/IdeaBlade/Breeze/blob/master/Breeze.Client/Scripts/Labs/breeze.metadata-helper.js
            // The helper reduces data entry by applying common conventions
            // and converting common abbreviations (e.g., 'type' -> 'dataType')

            // 'None' (client-generated) is the default key generation strategy for this app
            var keyGen = breeze.AutoGeneratedKeyType.None;

            // namespace of the corresponding classes on the server
            var namespace = 'SiqCloset.Model';

            var helper = new breeze.config.MetadataHelper(namespace, keyGen);

            /*** Convenience fns and vars ***/

            // addType - make it easy to add the type to the store using the helper
            var addType = function (type) { helper.addTypeToStore(store, type); };

            // DataTypes
            var DT = breeze.DataType;
            var BOOL = DT.Boolean;
            var DATE = DT.DateTime;
            var DECIMAL = DT.Decimal;
            var INT = DT.Int32;
            var ID = DT.MongoObjectId;

            addSmtpSettings();
            addMailOptions();
            addUser();
            addRole();

            function addSmtpSettings() {
                addType({
                    name: 'SmtpSetting',
                    dataProperties: {
                        id: { type: ID, isPartOfKey: true },
                        serviceName: { max: 255 },
                        username: { max: 255 },
                        password: { max: 255 }
                    }
                });
            }

            function addMailOptions() {
                addType({
                    name: 'MailOption',
                    dataProperties: {
                        id: { type: ID, isPartOfKey: true },
                        from: { max: 255 },
                        to: { max: 255 },
                        cc: { max: 255 },
                        toSendShipmentTracking: { type: BOOL },
                        toSendShipmentSchedule: { type: BOOL }
                    }
                });
            }

            function addUser() {
                addType({
                    name: 'User',
                    dataProperties: {
                        id: { type: ID, isPartOfKey: true },
                        name:         { max: 50, required: true },
                        email:        { max: 255 },
                        roles:        { hasMany: true }
                    }
                });
            }

            function addRole() {
                addType({
                    name: 'Role',
                    dataProperties: {
                        id: { type: ID, isPartOfKey: true },
                        name:         { max: 50, required: true }
                    }
                });
            }
        }
    }



})(this.angular);